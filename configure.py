#!/usr/bin/env python3
#
# Copyright 2001 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Script that generates the build.ninja for botocore."""

import argparse
import os
import re

import ninja_syntax

SOURCE_DIR = os.path.dirname(os.path.realpath(__file__))

BUILD_FILENAME = 'build.ninja'
SERVICES_WHITELIST = [
    'cloudwatch',
]


def service_version(name, api_version):
    api_version_package = 'v' + api_version.replace('-', '_')
    return os.path.join(
        '$clients',
        name,
        api_version_package,
        'service.py',
    )


def service_latest_init(name):
    return os.path.join('$clients', name, '__init__.py')


def service_version_init(name, api_version):
    return os.path.join('$clients', name, api_version, '__init__.py')


def service_specification(name, api_version):
    return os.path.join('$data', name, api_version, 'service-2.json')


def get_service_versions(name, data_dir):
    service_directory = os.path.join(data_dir, name)
    versions = os.listdir(service_directory)
    versions = [v for v in versions if re.match(r'\d{4}-\d{2}-\d{2}', v)]
    return versions


def generate_build(root, build_file, configure_args, services_to_generate):
    n = ninja_syntax.Writer(build_file)  # pylint: disable=invalid-name

    n.comment('This file is used to build ninja itself.')
    n.comment('It is generated by ' + os.path.basename(__file__) + '.')
    n.newline()

    if root == os.getcwd():
        # In the common case where we're building directly in the source
        # tree, simplify all the paths to just be cwd-relative.
        root = '.'
    n.comment('Paths')
    n.variable('root', root)
    n.variable('builddir', os.path.join('$root', 'build'))
    botocore_dir = os.path.join(root, 'botocore')
    n.variable('botocore', os.path.join('$root', 'botocore'))
    # Using actual data directory path in this script, but keep the variable
    # reference in the ninja file.
    data_dir = os.path.join(botocore_dir, 'data')
    n.variable('data', os.path.join('$botocore', 'data'))
    n.variable('clients', os.path.join('$botocore', '_clients'))
    n.newline()

    n.variable('configure', os.path.join('$root', 'configure.py'))
    n.variable('configure_args', ' '.join(configure_args))
    n.newline()

    n.comment('Scripts')
    n.variable(
        'build-service-client',
        os.path.join('$root', 'scripts', 'build-service-client'),
    )
    build_service_client = 'build-service-client'
    n.rule(build_service_client, command='$build-service-client $in $out')
    n.newline()

    n.variable(
        'build-service-default-init-module',
        os.path.join('$root', 'scripts', 'build-service-default-init-module'),
    )
    build_service_default_init_module = 'build-service-default-init-module'
    n.rule(
        build_service_default_init_module,
        command='$build-service-default-init-module $in $out'
    )
    n.newline()

    all_targets = []

    n.comment('Services')

    for service_name in services_to_generate:
        versions = get_service_versions(service_name, data_dir)
        assert versions, 'There must be more than 0 versions.'
        service_specs = []
        for version in versions:
            version_build = service_version(service_name, version)
            spec_file = service_specification(service_name, version)
            n.build(
                version_build,
                rule=build_service_client,
                inputs=spec_file,
                # Force rebuild when modifying the script.
                implicit=['$build-service-client'],
            )
            all_targets.append(version_build)
            service_specs.append(spec_file)

        latest_init = service_latest_init(service_name)
        n.build(
            latest_init,
            rule=build_service_default_init_module,
            inputs=service_specs,
            # Force rebuild when modifying the script.
            implicit=['$build-service-default-init-module'],
        )
        n.newline()

    n.comment('Regenerate build files if build script changes.')
    n.rule('configure', command='$configure $configure_args', generator=True)
    n.build('build.ninja', rule='configure', implicit='$configure')
    n.newline()

    n.build('all', 'phony', all_targets)

    n.close()


def list_all_services(root_dir):
    data_dir = os.path.join(root_dir, 'botocore', 'data')
    return [
        d for d in os.listdir(data_dir)
        if os.path.isdir(os.path.join(data_dir, d))
    ]


def main(args):
    root_dir = SOURCE_DIR
    parser = argparse.ArgumentParser()
    parser.add_argument('--with-all-services', action='store_true')
    parsed_args = parser.parse_args(args)
    if parsed_args.with_all_services:
        services_to_generate = list_all_services(root_dir)
    else:
        services_to_generate = SERVICES_WHITELIST

    with open(BUILD_FILENAME, 'w') as bf:
        generate_build(root_dir, bf, args, services_to_generate)


if __name__ == '__main__':
    import sys
    main(sys.argv[1:])
