# THIS FILE IS AUTO-GENERATED. DO NOT EDIT THIS FILE BY HAND.

from botocore.client import BaseClient

class IoTAnalytics(BaseClient):

    def batch_put_message(self, **kwargs):
        """Sends messages to a channel.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/BatchPutMessage>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.batch_put_message(
              channelName='string',
              messages=[
                  {
                      'messageId': 'string',
                      'payload': b'bytes'
                  },
              ]
          )
        :type channelName: string
        :param channelName: **[REQUIRED]** 
        
          The name of the channel where the messages are sent.
        
          
        
        
        :type messages: list
        :param messages: **[REQUIRED]** 
        
          The list of messages to be sent. Each message has format: '{ "messageId": "string", "payload": "string"}'.
        
          
        
        
          - *(dict) --* 
        
            Information about a message.
        
            
        
          
            - **messageId** *(string) --* **[REQUIRED]** 
        
              The ID you wish to assign to the message. Each "messageId" must be unique within each batch sent.
        
              
        
            
            - **payload** *(bytes) --* **[REQUIRED]** 
        
              The payload of the message. This may be a JSON string or a Base64-encoded string representing binary data (in which case you must decode it by means of a pipeline activity).
        
              
        
            
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'batchPutMessageErrorEntries': [
                    {
                        'messageId': 'string',
                        'errorCode': 'string',
                        'errorMessage': 'string'
                    },
                ]
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **batchPutMessageErrorEntries** *(list) --* 
        
              A list of any errors encountered when sending the messages to the channel.
        
              
              
        
              - *(dict) --* 
        
                Contains informations about errors.
        
                
                
        
                - **messageId** *(string) --* 
        
                  The ID of the message that caused the error. (See the value corresponding to the "messageId" key in the message object.)
        
                  
                
        
                - **errorCode** *(string) --* 
        
                  The code associated with the error.
        
                  
                
        
                - **errorMessage** *(string) --* 
        
                  The message associated with the error.
        
                  
            
          
        
        """
        return self._make_api_call("BatchPutMessage", kwargs)

    def cancel_pipeline_reprocessing(self, **kwargs):
        """Cancels the reprocessing of data through the pipeline.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CancelPipelineReprocessing>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.cancel_pipeline_reprocessing(
              pipelineName='string',
              reprocessingId='string'
          )
        :type pipelineName: string
        :param pipelineName: **[REQUIRED]** 
        
          The name of pipeline for which data reprocessing is canceled.
        
          
        
        
        :type reprocessingId: string
        :param reprocessingId: **[REQUIRED]** 
        
          The ID of the reprocessing task (returned by "StartPipelineReprocessing").
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {}
          **Response Structure** 
        
          
        
          - *(dict) --* 
        
        """
        return self._make_api_call("CancelPipelineReprocessing", kwargs)

    def create_channel(self, **kwargs):
        """Creates a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateChannel>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.create_channel(
              channelName='string',
              retentionPeriod={
                  'unlimited': True|False,
                  'numberOfDays': 123
              },
              tags=[
                  {
                      'key': 'string',
                      'value': 'string'
                  },
              ]
          )
        :type channelName: string
        :param channelName: **[REQUIRED]** 
        
          The name of the channel.
        
          
        
        
        :type retentionPeriod: dict
        :param retentionPeriod: 
        
          How long, in days, message data is kept for the channel.
        
          
        
        
          - **unlimited** *(boolean) --* 
        
            If true, message data is kept indefinitely.
        
            
        
          
          - **numberOfDays** *(integer) --* 
        
            The number of days that message data is kept. The "unlimited" parameter must be false.
        
            
        
          
        
        :type tags: list
        :param tags: 
        
          Metadata which can be used to manage the channel.
        
          
        
        
          - *(dict) --* 
        
            A set of key/value pairs which are used to manage the resource.
        
            
        
          
            - **key** *(string) --* **[REQUIRED]** 
        
              The tag's key.
        
              
        
            
            - **value** *(string) --* **[REQUIRED]** 
        
              The tag's value.
        
              
        
            
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'channelName': 'string',
                'channelArn': 'string',
                'retentionPeriod': {
                    'unlimited': True|False,
                    'numberOfDays': 123
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **channelName** *(string) --* 
        
              The name of the channel.
        
              
            
        
            - **channelArn** *(string) --* 
        
              The ARN of the channel.
        
              
            
        
            - **retentionPeriod** *(dict) --* 
        
              How long, in days, message data is kept for the channel.
        
              
              
        
              - **unlimited** *(boolean) --* 
        
                If true, message data is kept indefinitely.
        
                
              
        
              - **numberOfDays** *(integer) --* 
        
                The number of days that message data is kept. The "unlimited" parameter must be false.
        
                
          
        
        """
        return self._make_api_call("CreateChannel", kwargs)

    def create_dataset(self, **kwargs):
        """Creates a data set. A data set stores data retrieved from a data store by applying an SQL action.
        
         
        
        .. note::
        
           
        
          This operation creates the skeleton of a data set. To populate the data set, call "CreateDatasetContent".
        
           
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateDataset>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.create_dataset(
              datasetName='string',
              actions=[
                  {
                      'actionName': 'string',
                      'queryAction': {
                          'sqlQuery': 'string'
                      }
                  },
              ],
              triggers=[
                  {
                      'schedule': {
                          'expression': 'string'
                      }
                  },
              ],
              tags=[
                  {
                      'key': 'string',
                      'value': 'string'
                  },
              ]
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set.
        
          
        
        
        :type actions: list
        :param actions: **[REQUIRED]** 
        
          A list of actions that create the data set. Only one action is supported at this time.
        
          
        
        
          - *(dict) --* 
        
            A "DatasetAction" object specifying the query that creates the data set content.
        
            
        
          
            - **actionName** *(string) --* 
        
              The name of the data set action.
        
              
        
            
            - **queryAction** *(dict) --* 
        
              An "SqlQueryDatasetAction" object that contains the SQL query to modify the message.
        
              
        
            
              - **sqlQuery** *(string) --* **[REQUIRED]** 
        
                An SQL query string.
        
                
        
              
            
          
        
        :type triggers: list
        :param triggers: 
        
          A list of triggers. A trigger causes data set content to be populated at a specified time or time interval. The list of triggers can be empty or contain up to five **DataSetTrigger** objects.
        
          
        
        
          - *(dict) --* 
        
            The "DatasetTrigger" that specifies when the data set is automatically updated.
        
            
        
          
            - **schedule** *(dict) --* 
        
              The "Schedule" when the trigger is initiated.
        
              
        
            
              - **expression** *(string) --* 
        
                The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the Amazon CloudWatch documentation.
        
                
        
              
            
          
        
        :type tags: list
        :param tags: 
        
          Metadata which can be used to manage the data set.
        
          
        
        
          - *(dict) --* 
        
            A set of key/value pairs which are used to manage the resource.
        
            
        
          
            - **key** *(string) --* **[REQUIRED]** 
        
              The tag's key.
        
              
        
            
            - **value** *(string) --* **[REQUIRED]** 
        
              The tag's value.
        
              
        
            
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'datasetName': 'string',
                'datasetArn': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **datasetName** *(string) --* 
        
              The name of the data set.
        
              
            
        
            - **datasetArn** *(string) --* 
        
              The ARN of the data set.
        
              
        
        """
        return self._make_api_call("CreateDataset", kwargs)

    def create_dataset_content(self, **kwargs):
        """Creates the content of a data set by applying an SQL action.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateDatasetContent>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.create_dataset_content(
              datasetName='string'
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set.
        
          
        
        
        
        :returns: None
        """
        return self._make_api_call("CreateDatasetContent", kwargs)

    def create_datastore(self, **kwargs):
        """Creates a data store, which is a repository for messages.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateDatastore>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.create_datastore(
              datastoreName='string',
              retentionPeriod={
                  'unlimited': True|False,
                  'numberOfDays': 123
              },
              tags=[
                  {
                      'key': 'string',
                      'value': 'string'
                  },
              ]
          )
        :type datastoreName: string
        :param datastoreName: **[REQUIRED]** 
        
          The name of the data store.
        
          
        
        
        :type retentionPeriod: dict
        :param retentionPeriod: 
        
          How long, in days, message data is kept for the data store.
        
          
        
        
          - **unlimited** *(boolean) --* 
        
            If true, message data is kept indefinitely.
        
            
        
          
          - **numberOfDays** *(integer) --* 
        
            The number of days that message data is kept. The "unlimited" parameter must be false.
        
            
        
          
        
        :type tags: list
        :param tags: 
        
          Metadata which can be used to manage the data store.
        
          
        
        
          - *(dict) --* 
        
            A set of key/value pairs which are used to manage the resource.
        
            
        
          
            - **key** *(string) --* **[REQUIRED]** 
        
              The tag's key.
        
              
        
            
            - **value** *(string) --* **[REQUIRED]** 
        
              The tag's value.
        
              
        
            
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'datastoreName': 'string',
                'datastoreArn': 'string',
                'retentionPeriod': {
                    'unlimited': True|False,
                    'numberOfDays': 123
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **datastoreName** *(string) --* 
        
              The name of the data store.
        
              
            
        
            - **datastoreArn** *(string) --* 
        
              The ARN of the data store.
        
              
            
        
            - **retentionPeriod** *(dict) --* 
        
              How long, in days, message data is kept for the data store.
        
              
              
        
              - **unlimited** *(boolean) --* 
        
                If true, message data is kept indefinitely.
        
                
              
        
              - **numberOfDays** *(integer) --* 
        
                The number of days that message data is kept. The "unlimited" parameter must be false.
        
                
          
        
        """
        return self._make_api_call("CreateDatastore", kwargs)

    def create_pipeline(self, **kwargs):
        """Creates a pipeline. A pipeline consumes messages from one or more channels and allows you to process the messages before storing them in a data store.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreatePipeline>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.create_pipeline(
              pipelineName='string',
              pipelineActivities=[
                  {
                      'channel': {
                          'name': 'string',
                          'channelName': 'string',
                          'next': 'string'
                      },
                      'lambda': {
                          'name': 'string',
                          'lambdaName': 'string',
                          'batchSize': 123,
                          'next': 'string'
                      },
                      'datastore': {
                          'name': 'string',
                          'datastoreName': 'string'
                      },
                      'addAttributes': {
                          'name': 'string',
                          'attributes': {
                              'string': 'string'
                          },
                          'next': 'string'
                      },
                      'removeAttributes': {
                          'name': 'string',
                          'attributes': [
                              'string',
                          ],
                          'next': 'string'
                      },
                      'selectAttributes': {
                          'name': 'string',
                          'attributes': [
                              'string',
                          ],
                          'next': 'string'
                      },
                      'filter': {
                          'name': 'string',
                          'filter': 'string',
                          'next': 'string'
                      },
                      'math': {
                          'name': 'string',
                          'attribute': 'string',
                          'math': 'string',
                          'next': 'string'
                      },
                      'deviceRegistryEnrich': {
                          'name': 'string',
                          'attribute': 'string',
                          'thingName': 'string',
                          'roleArn': 'string',
                          'next': 'string'
                      },
                      'deviceShadowEnrich': {
                          'name': 'string',
                          'attribute': 'string',
                          'thingName': 'string',
                          'roleArn': 'string',
                          'next': 'string'
                      }
                  },
              ],
              tags=[
                  {
                      'key': 'string',
                      'value': 'string'
                  },
              ]
          )
        :type pipelineName: string
        :param pipelineName: **[REQUIRED]** 
        
          The name of the pipeline.
        
          
        
        
        :type pipelineActivities: list
        :param pipelineActivities: **[REQUIRED]** 
        
          A list of pipeline activities.
        
           
        
          The list can be 1-25 **PipelineActivity** objects. Activities perform transformations on your messages, such as removing, renaming, or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.
        
          
        
        
          - *(dict) --* 
        
            An activity that performs a transformation on a message.
        
            
        
          
            - **channel** *(dict) --* 
        
              Determines the source of the messages to be processed.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'channel' activity.
        
                
        
              
              - **channelName** *(string) --* **[REQUIRED]** 
        
                The name of the channel from which the messages are processed.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **lambda** *(dict) --* 
        
              Runs a Lambda function to modify the message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'lambda' activity.
        
                
        
              
              - **lambdaName** *(string) --* **[REQUIRED]** 
        
                The name of the Lambda function that is run on the message.
        
                
        
              
              - **batchSize** *(integer) --* **[REQUIRED]** 
        
                The number of messages passed to the Lambda function for processing.
        
                 
        
                The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **datastore** *(dict) --* 
        
              Specifies where to store the processed message data.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'datastore' activity.
        
                
        
              
              - **datastoreName** *(string) --* **[REQUIRED]** 
        
                The name of the data store where processed messages are stored.
        
                
        
              
            
            - **addAttributes** *(dict) --* 
        
              Adds other attributes based on existing attributes in the message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'addAttributes' activity.
        
                
        
              
              - **attributes** *(dict) --* **[REQUIRED]** 
        
                A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.
        
                 
        
                .. note::
        
                   
        
                  The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".
        
                   
        
                
        
              
                - *(string) --* 
        
                
                  - *(string) --* 
        
                  
            
          
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **removeAttributes** *(dict) --* 
        
              Removes attributes from a message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'removeAttributes' activity.
        
                
        
              
              - **attributes** *(list) --* **[REQUIRED]** 
        
                A list of 1-50 attributes to remove from the message.
        
                
        
              
                - *(string) --* 
        
                
            
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **selectAttributes** *(dict) --* 
        
              Creates a new message using only the specified attributes from the original message. 
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'selectAttributes' activity.
        
                
        
              
              - **attributes** *(list) --* **[REQUIRED]** 
        
                A list of the attributes to select from the message.
        
                
        
              
                - *(string) --* 
        
                
            
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **filter** *(dict) --* 
        
              Filters a message based on its attributes.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'filter' activity.
        
                
        
              
              - **filter** *(string) --* **[REQUIRED]** 
        
                An expression that looks like an SQL WHERE clause that must return a Boolean value.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **math** *(dict) --* 
        
              Computes an arithmetic expression using the message's attributes and adds it to the message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'math' activity.
        
                
        
              
              - **attribute** *(string) --* **[REQUIRED]** 
        
                The name of the attribute that will contain the result of the math operation.
        
                
        
              
              - **math** *(string) --* **[REQUIRED]** 
        
                An expression that uses one or more existing attributes and must return an integer value.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **deviceRegistryEnrich** *(dict) --* 
        
              Adds data from the AWS IoT device registry to your message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'deviceRegistryEnrich' activity.
        
                
        
              
              - **attribute** *(string) --* **[REQUIRED]** 
        
                The name of the attribute that is added to the message.
        
                
        
              
              - **thingName** *(string) --* **[REQUIRED]** 
        
                The name of the IoT device whose registry information is added to the message.
        
                
        
              
              - **roleArn** *(string) --* **[REQUIRED]** 
        
                The ARN of the role that allows access to the device's registry information.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **deviceShadowEnrich** *(dict) --* 
        
              Adds information from the AWS IoT Device Shadows service to a message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'deviceShadowEnrich' activity.
        
                
        
              
              - **attribute** *(string) --* **[REQUIRED]** 
        
                The name of the attribute that is added to the message.
        
                
        
              
              - **thingName** *(string) --* **[REQUIRED]** 
        
                The name of the IoT device whose shadow information is added to the message.
        
                
        
              
              - **roleArn** *(string) --* **[REQUIRED]** 
        
                The ARN of the role that allows access to the device's shadow.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
          
        
        :type tags: list
        :param tags: 
        
          Metadata which can be used to manage the pipeline.
        
          
        
        
          - *(dict) --* 
        
            A set of key/value pairs which are used to manage the resource.
        
            
        
          
            - **key** *(string) --* **[REQUIRED]** 
        
              The tag's key.
        
              
        
            
            - **value** *(string) --* **[REQUIRED]** 
        
              The tag's value.
        
              
        
            
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'pipelineName': 'string',
                'pipelineArn': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **pipelineName** *(string) --* 
        
              The name of the pipeline.
        
              
            
        
            - **pipelineArn** *(string) --* 
        
              The ARN of the pipeline.
        
              
        
        """
        return self._make_api_call("CreatePipeline", kwargs)

    def delete_channel(self, **kwargs):
        """Deletes the specified channel.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteChannel>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.delete_channel(
              channelName='string'
          )
        :type channelName: string
        :param channelName: **[REQUIRED]** 
        
          The name of the channel to delete.
        
          
        
        
        
        :returns: None
        """
        return self._make_api_call("DeleteChannel", kwargs)

    def delete_dataset(self, **kwargs):
        """Deletes the specified data set.
        
         
        
        You do not have to delete the content of the data set before you perform this operation.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteDataset>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.delete_dataset(
              datasetName='string'
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set to delete.
        
          
        
        
        
        :returns: None
        """
        return self._make_api_call("DeleteDataset", kwargs)

    def delete_dataset_content(self, **kwargs):
        """Deletes the content of the specified data set.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteDatasetContent>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.delete_dataset_content(
              datasetName='string',
              versionId='string'
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set whose content is deleted.
        
          
        
        
        :type versionId: string
        :param versionId: 
        
          The version of the data set whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
        
          
        
        
        
        :returns: None
        """
        return self._make_api_call("DeleteDatasetContent", kwargs)

    def delete_datastore(self, **kwargs):
        """Deletes the specified data store.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteDatastore>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.delete_datastore(
              datastoreName='string'
          )
        :type datastoreName: string
        :param datastoreName: **[REQUIRED]** 
        
          The name of the data store to delete.
        
          
        
        
        
        :returns: None
        """
        return self._make_api_call("DeleteDatastore", kwargs)

    def delete_pipeline(self, **kwargs):
        """Deletes the specified pipeline.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeletePipeline>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.delete_pipeline(
              pipelineName='string'
          )
        :type pipelineName: string
        :param pipelineName: **[REQUIRED]** 
        
          The name of the pipeline to delete.
        
          
        
        
        
        :returns: None
        """
        return self._make_api_call("DeletePipeline", kwargs)

    def describe_channel(self, **kwargs):
        """Retrieves information about a channel.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeChannel>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.describe_channel(
              channelName='string',
              includeStatistics=True|False
          )
        :type channelName: string
        :param channelName: **[REQUIRED]** 
        
          The name of the channel whose information is retrieved.
        
          
        
        
        :type includeStatistics: boolean
        :param includeStatistics: 
        
          If true, include statistics about the channel in the response.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'channel': {
                    'name': 'string',
                    'arn': 'string',
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'retentionPeriod': {
                        'unlimited': True|False,
                        'numberOfDays': 123
                    },
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
                'statistics': {
                    'size': {
                        'estimatedSizeInBytes': 123.0,
                        'estimatedOn': datetime(2015, 1, 1)
                    }
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **channel** *(dict) --* 
        
              An object that contains information about the channel.
        
              
              
        
              - **name** *(string) --* 
        
                The name of the channel.
        
                
              
        
              - **arn** *(string) --* 
        
                The ARN of the channel.
        
                
              
        
              - **status** *(string) --* 
        
                The status of the channel.
        
                
              
        
              - **retentionPeriod** *(dict) --* 
        
                How long, in days, message data is kept for the channel.
        
                
                
        
                - **unlimited** *(boolean) --* 
        
                  If true, message data is kept indefinitely.
        
                  
                
        
                - **numberOfDays** *(integer) --* 
        
                  The number of days that message data is kept. The "unlimited" parameter must be false.
        
                  
            
              
        
              - **creationTime** *(datetime) --* 
        
                When the channel was created.
        
                
              
        
              - **lastUpdateTime** *(datetime) --* 
        
                When the channel was last updated.
        
                
          
            
        
            - **statistics** *(dict) --* 
        
              Statistics about the channel. Included if the 'includeStatistics' parameter is set to true in the request.
        
              
              
        
              - **size** *(dict) --* 
        
                The estimated size of the channel.
        
                
                
        
                - **estimatedSizeInBytes** *(float) --* 
        
                  The estimated size of the resource in bytes.
        
                  
                
        
                - **estimatedOn** *(datetime) --* 
        
                  The time when the estimate of the size of the resource was made.
        
                  
            
          
        
        """
        return self._make_api_call("DescribeChannel", kwargs)

    def describe_dataset(self, **kwargs):
        """Retrieves information about a data set.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeDataset>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.describe_dataset(
              datasetName='string'
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set whose information is retrieved.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'dataset': {
                    'name': 'string',
                    'arn': 'string',
                    'actions': [
                        {
                            'actionName': 'string',
                            'queryAction': {
                                'sqlQuery': 'string'
                            }
                        },
                    ],
                    'triggers': [
                        {
                            'schedule': {
                                'expression': 'string'
                            }
                        },
                    ],
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **dataset** *(dict) --* 
        
              An object that contains information about the data set.
        
              
              
        
              - **name** *(string) --* 
        
                The name of the data set.
        
                
              
        
              - **arn** *(string) --* 
        
                The ARN of the data set.
        
                
              
        
              - **actions** *(list) --* 
        
                The "DatasetAction" objects that create the data set.
        
                
                
        
                - *(dict) --* 
        
                  A "DatasetAction" object specifying the query that creates the data set content.
        
                  
                  
        
                  - **actionName** *(string) --* 
        
                    The name of the data set action.
        
                    
                  
        
                  - **queryAction** *(dict) --* 
        
                    An "SqlQueryDatasetAction" object that contains the SQL query to modify the message.
        
                    
                    
        
                    - **sqlQuery** *(string) --* 
        
                      An SQL query string.
        
                      
                
              
            
              
        
              - **triggers** *(list) --* 
        
                The "DatasetTrigger" objects that specify when the data set is automatically updated.
        
                
                
        
                - *(dict) --* 
        
                  The "DatasetTrigger" that specifies when the data set is automatically updated.
        
                  
                  
        
                  - **schedule** *(dict) --* 
        
                    The "Schedule" when the trigger is initiated.
        
                    
                    
        
                    - **expression** *(string) --* 
        
                      The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the Amazon CloudWatch documentation.
        
                      
                
              
            
              
        
              - **status** *(string) --* 
        
                The status of the data set.
        
                
              
        
              - **creationTime** *(datetime) --* 
        
                When the data set was created.
        
                
              
        
              - **lastUpdateTime** *(datetime) --* 
        
                The last time the data set was updated.
        
                
          
        
        """
        return self._make_api_call("DescribeDataset", kwargs)

    def describe_datastore(self, **kwargs):
        """Retrieves information about a data store.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeDatastore>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.describe_datastore(
              datastoreName='string',
              includeStatistics=True|False
          )
        :type datastoreName: string
        :param datastoreName: **[REQUIRED]** 
        
          The name of the data store
        
          
        
        
        :type includeStatistics: boolean
        :param includeStatistics: 
        
          If true, include statistics about the data store in the response.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'datastore': {
                    'name': 'string',
                    'arn': 'string',
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'retentionPeriod': {
                        'unlimited': True|False,
                        'numberOfDays': 123
                    },
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
                'statistics': {
                    'size': {
                        'estimatedSizeInBytes': 123.0,
                        'estimatedOn': datetime(2015, 1, 1)
                    }
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **datastore** *(dict) --* 
        
              Information about the data store.
        
              
              
        
              - **name** *(string) --* 
        
                The name of the data store.
        
                
              
        
              - **arn** *(string) --* 
        
                The ARN of the data store.
        
                
              
        
              - **status** *(string) --* 
        
                The status of a data store:
        
                  CREATING  
        
                The data store is being created.
        
                  ACTIVE  
        
                The data store has been created and can be used.
        
                  DELETING  
        
                The data store is being deleted.
        
                  
              
        
              - **retentionPeriod** *(dict) --* 
        
                How long, in days, message data is kept for the data store.
        
                
                
        
                - **unlimited** *(boolean) --* 
        
                  If true, message data is kept indefinitely.
        
                  
                
        
                - **numberOfDays** *(integer) --* 
        
                  The number of days that message data is kept. The "unlimited" parameter must be false.
        
                  
            
              
        
              - **creationTime** *(datetime) --* 
        
                When the data store was created.
        
                
              
        
              - **lastUpdateTime** *(datetime) --* 
        
                The last time the data store was updated.
        
                
          
            
        
            - **statistics** *(dict) --* 
        
              Statistics about the data store. Included if the 'includeStatistics' parameter is set to true in the request.
        
              
              
        
              - **size** *(dict) --* 
        
                The estimated size of the data store.
        
                
                
        
                - **estimatedSizeInBytes** *(float) --* 
        
                  The estimated size of the resource in bytes.
        
                  
                
        
                - **estimatedOn** *(datetime) --* 
        
                  The time when the estimate of the size of the resource was made.
        
                  
            
          
        
        """
        return self._make_api_call("DescribeDatastore", kwargs)

    def describe_logging_options(self, **kwargs):
        """Retrieves the current settings of the AWS IoT Analytics logging options.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeLoggingOptions>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.describe_logging_options()
          
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'loggingOptions': {
                    'roleArn': 'string',
                    'level': 'ERROR',
                    'enabled': True|False
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **loggingOptions** *(dict) --* 
        
              The current settings of the AWS IoT Analytics logging options.
        
              
              
        
              - **roleArn** *(string) --* 
        
                The ARN of the role that grants permission to AWS IoT Analytics to perform logging.
        
                
              
        
              - **level** *(string) --* 
        
                The logging level. Currently, only "ERROR" is supported.
        
                
              
        
              - **enabled** *(boolean) --* 
        
                If true, logging is enabled for AWS IoT Analytics.
        
                
          
        
        """
        return self._make_api_call("DescribeLoggingOptions", kwargs)

    def describe_pipeline(self, **kwargs):
        """Retrieves information about a pipeline.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribePipeline>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.describe_pipeline(
              pipelineName='string'
          )
        :type pipelineName: string
        :param pipelineName: **[REQUIRED]** 
        
          The name of the pipeline whose information is retrieved.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'pipeline': {
                    'name': 'string',
                    'arn': 'string',
                    'activities': [
                        {
                            'channel': {
                                'name': 'string',
                                'channelName': 'string',
                                'next': 'string'
                            },
                            'lambda': {
                                'name': 'string',
                                'lambdaName': 'string',
                                'batchSize': 123,
                                'next': 'string'
                            },
                            'datastore': {
                                'name': 'string',
                                'datastoreName': 'string'
                            },
                            'addAttributes': {
                                'name': 'string',
                                'attributes': {
                                    'string': 'string'
                                },
                                'next': 'string'
                            },
                            'removeAttributes': {
                                'name': 'string',
                                'attributes': [
                                    'string',
                                ],
                                'next': 'string'
                            },
                            'selectAttributes': {
                                'name': 'string',
                                'attributes': [
                                    'string',
                                ],
                                'next': 'string'
                            },
                            'filter': {
                                'name': 'string',
                                'filter': 'string',
                                'next': 'string'
                            },
                            'math': {
                                'name': 'string',
                                'attribute': 'string',
                                'math': 'string',
                                'next': 'string'
                            },
                            'deviceRegistryEnrich': {
                                'name': 'string',
                                'attribute': 'string',
                                'thingName': 'string',
                                'roleArn': 'string',
                                'next': 'string'
                            },
                            'deviceShadowEnrich': {
                                'name': 'string',
                                'attribute': 'string',
                                'thingName': 'string',
                                'roleArn': 'string',
                                'next': 'string'
                            }
                        },
                    ],
                    'reprocessingSummaries': [
                        {
                            'id': 'string',
                            'status': 'RUNNING'|'SUCCEEDED'|'CANCELLED'|'FAILED',
                            'creationTime': datetime(2015, 1, 1)
                        },
                    ],
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **pipeline** *(dict) --* 
        
              A "Pipeline" object that contains information about the pipeline.
        
              
              
        
              - **name** *(string) --* 
        
                The name of the pipeline.
        
                
              
        
              - **arn** *(string) --* 
        
                The ARN of the pipeline.
        
                
              
        
              - **activities** *(list) --* 
        
                The activities that perform transformations on the messages.
        
                
                
        
                - *(dict) --* 
        
                  An activity that performs a transformation on a message.
        
                  
                  
        
                  - **channel** *(dict) --* 
        
                    Determines the source of the messages to be processed.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'channel' activity.
        
                      
                    
        
                    - **channelName** *(string) --* 
        
                      The name of the channel from which the messages are processed.
        
                      
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **lambda** *(dict) --* 
        
                    Runs a Lambda function to modify the message.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'lambda' activity.
        
                      
                    
        
                    - **lambdaName** *(string) --* 
        
                      The name of the Lambda function that is run on the message.
        
                      
                    
        
                    - **batchSize** *(integer) --* 
        
                      The number of messages passed to the Lambda function for processing.
        
                       
        
                      The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        
                      
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **datastore** *(dict) --* 
        
                    Specifies where to store the processed message data.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'datastore' activity.
        
                      
                    
        
                    - **datastoreName** *(string) --* 
        
                      The name of the data store where processed messages are stored.
        
                      
                
                  
        
                  - **addAttributes** *(dict) --* 
        
                    Adds other attributes based on existing attributes in the message.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'addAttributes' activity.
        
                      
                    
        
                    - **attributes** *(dict) --* 
        
                      A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.
        
                       
        
                      .. note::
        
                         
        
                        The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".
        
                         
        
                      
                      
        
                      - *(string) --* 
                        
        
                        - *(string) --* 
                  
                
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **removeAttributes** *(dict) --* 
        
                    Removes attributes from a message.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'removeAttributes' activity.
        
                      
                    
        
                    - **attributes** *(list) --* 
        
                      A list of 1-50 attributes to remove from the message.
        
                      
                      
        
                      - *(string) --* 
                  
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **selectAttributes** *(dict) --* 
        
                    Creates a new message using only the specified attributes from the original message. 
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'selectAttributes' activity.
        
                      
                    
        
                    - **attributes** *(list) --* 
        
                      A list of the attributes to select from the message.
        
                      
                      
        
                      - *(string) --* 
                  
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **filter** *(dict) --* 
        
                    Filters a message based on its attributes.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'filter' activity.
        
                      
                    
        
                    - **filter** *(string) --* 
        
                      An expression that looks like an SQL WHERE clause that must return a Boolean value.
        
                      
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **math** *(dict) --* 
        
                    Computes an arithmetic expression using the message's attributes and adds it to the message.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'math' activity.
        
                      
                    
        
                    - **attribute** *(string) --* 
        
                      The name of the attribute that will contain the result of the math operation.
        
                      
                    
        
                    - **math** *(string) --* 
        
                      An expression that uses one or more existing attributes and must return an integer value.
        
                      
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **deviceRegistryEnrich** *(dict) --* 
        
                    Adds data from the AWS IoT device registry to your message.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'deviceRegistryEnrich' activity.
        
                      
                    
        
                    - **attribute** *(string) --* 
        
                      The name of the attribute that is added to the message.
        
                      
                    
        
                    - **thingName** *(string) --* 
        
                      The name of the IoT device whose registry information is added to the message.
        
                      
                    
        
                    - **roleArn** *(string) --* 
        
                      The ARN of the role that allows access to the device's registry information.
        
                      
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
                  
        
                  - **deviceShadowEnrich** *(dict) --* 
        
                    Adds information from the AWS IoT Device Shadows service to a message.
        
                    
                    
        
                    - **name** *(string) --* 
        
                      The name of the 'deviceShadowEnrich' activity.
        
                      
                    
        
                    - **attribute** *(string) --* 
        
                      The name of the attribute that is added to the message.
        
                      
                    
        
                    - **thingName** *(string) --* 
        
                      The name of the IoT device whose shadow information is added to the message.
        
                      
                    
        
                    - **roleArn** *(string) --* 
        
                      The ARN of the role that allows access to the device's shadow.
        
                      
                    
        
                    - **next** *(string) --* 
        
                      The next activity in the pipeline.
        
                      
                
              
            
              
        
              - **reprocessingSummaries** *(list) --* 
        
                A summary of information about the pipeline reprocessing.
        
                
                
        
                - *(dict) --* 
        
                  Information about pipeline reprocessing.
        
                  
                  
        
                  - **id** *(string) --* 
        
                    The 'reprocessingId' returned by "StartPipelineReprocessing".
        
                    
                  
        
                  - **status** *(string) --* 
        
                    The status of the pipeline reprocessing.
        
                    
                  
        
                  - **creationTime** *(datetime) --* 
        
                    The time the pipeline reprocessing was created.
        
                    
              
            
              
        
              - **creationTime** *(datetime) --* 
        
                When the pipeline was created.
        
                
              
        
              - **lastUpdateTime** *(datetime) --* 
        
                The last time the pipeline was updated.
        
                
          
        
        """
        return self._make_api_call("DescribePipeline", kwargs)

    def get_dataset_content(self, **kwargs):
        """Retrieves the contents of a data set as pre-signed URIs.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/GetDatasetContent>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.get_dataset_content(
              datasetName='string',
              versionId='string'
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set whose contents are retrieved.
        
          
        
        
        :type versionId: string
        :param versionId: 
        
          The version of the data set whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'entries': [
                    {
                        'entryName': 'string',
                        'dataURI': 'string'
                    },
                ],
                'timestamp': datetime(2015, 1, 1),
                'status': {
                    'state': 'CREATING'|'SUCCEEDED'|'FAILED',
                    'reason': 'string'
                }
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **entries** *(list) --* 
        
              A list of "DatasetEntry" objects.
        
              
              
        
              - *(dict) --* 
        
                The reference to a data set entry.
        
                
                
        
                - **entryName** *(string) --* 
        
                  The name of the data set item.
        
                  
                
        
                - **dataURI** *(string) --* 
        
                  The pre-signed URI of the data set item.
        
                  
            
          
            
        
            - **timestamp** *(datetime) --* 
        
              The time when the request was made.
        
              
            
        
            - **status** *(dict) --* 
        
              The status of the data set content.
        
              
              
        
              - **state** *(string) --* 
        
                The state of the data set. Can be one of "CREATING", "SUCCEEDED" or "FAILED".
        
                
              
        
              - **reason** *(string) --* 
        
                The reason the data set is in this state.
        
                
          
        
        """
        return self._make_api_call("GetDatasetContent", kwargs)

    def list_channels(self, **kwargs):
        """Retrieves a list of channels.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListChannels>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.list_channels(
              nextToken='string',
              maxResults=123
          )
        :type nextToken: string
        :param nextToken: 
        
          The token for the next set of results.
        
          
        
        
        :type maxResults: integer
        :param maxResults: 
        
          The maximum number of results to return in this request.
        
           
        
          The default value is 100.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'channelSummaries': [
                    {
                        'channelName': 'string',
                        'status': 'CREATING'|'ACTIVE'|'DELETING',
                        'creationTime': datetime(2015, 1, 1),
                        'lastUpdateTime': datetime(2015, 1, 1)
                    },
                ],
                'nextToken': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **channelSummaries** *(list) --* 
        
              A list of "ChannelSummary" objects.
        
              
              
        
              - *(dict) --* 
        
                A summary of information about a channel.
        
                
                
        
                - **channelName** *(string) --* 
        
                  The name of the channel.
        
                  
                
        
                - **status** *(string) --* 
        
                  The status of the channel.
        
                  
                
        
                - **creationTime** *(datetime) --* 
        
                  When the channel was created.
        
                  
                
        
                - **lastUpdateTime** *(datetime) --* 
        
                  The last time the channel was updated.
        
                  
            
          
            
        
            - **nextToken** *(string) --* 
        
              The token to retrieve the next set of results, or ``null`` if there are no more results.
        
              
        
        """
        return self._make_api_call("ListChannels", kwargs)

    def list_datasets(self, **kwargs):
        """Retrieves information about data sets.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatasets>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.list_datasets(
              nextToken='string',
              maxResults=123
          )
        :type nextToken: string
        :param nextToken: 
        
          The token for the next set of results.
        
          
        
        
        :type maxResults: integer
        :param maxResults: 
        
          The maximum number of results to return in this request.
        
           
        
          The default value is 100.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'datasetSummaries': [
                    {
                        'datasetName': 'string',
                        'status': 'CREATING'|'ACTIVE'|'DELETING',
                        'creationTime': datetime(2015, 1, 1),
                        'lastUpdateTime': datetime(2015, 1, 1)
                    },
                ],
                'nextToken': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **datasetSummaries** *(list) --* 
        
              A list of "DatasetSummary" objects.
        
              
              
        
              - *(dict) --* 
        
                A summary of information about a data set.
        
                
                
        
                - **datasetName** *(string) --* 
        
                  The name of the data set.
        
                  
                
        
                - **status** *(string) --* 
        
                  The status of the data set.
        
                  
                
        
                - **creationTime** *(datetime) --* 
        
                  The time the data set was created.
        
                  
                
        
                - **lastUpdateTime** *(datetime) --* 
        
                  The last time the data set was updated.
        
                  
            
          
            
        
            - **nextToken** *(string) --* 
        
              The token to retrieve the next set of results, or ``null`` if there are no more results.
        
              
        
        """
        return self._make_api_call("ListDatasets", kwargs)

    def list_datastores(self, **kwargs):
        """Retrieves a list of data stores.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatastores>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.list_datastores(
              nextToken='string',
              maxResults=123
          )
        :type nextToken: string
        :param nextToken: 
        
          The token for the next set of results.
        
          
        
        
        :type maxResults: integer
        :param maxResults: 
        
          The maximum number of results to return in this request.
        
           
        
          The default value is 100.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'datastoreSummaries': [
                    {
                        'datastoreName': 'string',
                        'status': 'CREATING'|'ACTIVE'|'DELETING',
                        'creationTime': datetime(2015, 1, 1),
                        'lastUpdateTime': datetime(2015, 1, 1)
                    },
                ],
                'nextToken': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **datastoreSummaries** *(list) --* 
        
              A list of "DatastoreSummary" objects.
        
              
              
        
              - *(dict) --* 
        
                A summary of information about a data store.
        
                
                
        
                - **datastoreName** *(string) --* 
        
                  The name of the data store.
        
                  
                
        
                - **status** *(string) --* 
        
                  The status of the data store.
        
                  
                
        
                - **creationTime** *(datetime) --* 
        
                  When the data store was created.
        
                  
                
        
                - **lastUpdateTime** *(datetime) --* 
        
                  The last time the data store was updated.
        
                  
            
          
            
        
            - **nextToken** *(string) --* 
        
              The token to retrieve the next set of results, or ``null`` if there are no more results.
        
              
        
        """
        return self._make_api_call("ListDatastores", kwargs)

    def list_pipelines(self, **kwargs):
        """Retrieves a list of pipelines.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListPipelines>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.list_pipelines(
              nextToken='string',
              maxResults=123
          )
        :type nextToken: string
        :param nextToken: 
        
          The token for the next set of results.
        
          
        
        
        :type maxResults: integer
        :param maxResults: 
        
          The maximum number of results to return in this request.
        
           
        
          The default value is 100.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'pipelineSummaries': [
                    {
                        'pipelineName': 'string',
                        'reprocessingSummaries': [
                            {
                                'id': 'string',
                                'status': 'RUNNING'|'SUCCEEDED'|'CANCELLED'|'FAILED',
                                'creationTime': datetime(2015, 1, 1)
                            },
                        ],
                        'creationTime': datetime(2015, 1, 1),
                        'lastUpdateTime': datetime(2015, 1, 1)
                    },
                ],
                'nextToken': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **pipelineSummaries** *(list) --* 
        
              A list of "PipelineSummary" objects.
        
              
              
        
              - *(dict) --* 
        
                A summary of information about a pipeline.
        
                
                
        
                - **pipelineName** *(string) --* 
        
                  The name of the pipeline.
        
                  
                
        
                - **reprocessingSummaries** *(list) --* 
        
                  A summary of information about the pipeline reprocessing.
        
                  
                  
        
                  - *(dict) --* 
        
                    Information about pipeline reprocessing.
        
                    
                    
        
                    - **id** *(string) --* 
        
                      The 'reprocessingId' returned by "StartPipelineReprocessing".
        
                      
                    
        
                    - **status** *(string) --* 
        
                      The status of the pipeline reprocessing.
        
                      
                    
        
                    - **creationTime** *(datetime) --* 
        
                      The time the pipeline reprocessing was created.
        
                      
                
              
                
        
                - **creationTime** *(datetime) --* 
        
                  When the pipeline was created.
        
                  
                
        
                - **lastUpdateTime** *(datetime) --* 
        
                  When the pipeline was last updated.
        
                  
            
          
            
        
            - **nextToken** *(string) --* 
        
              The token to retrieve the next set of results, or ``null`` if there are no more results.
        
              
        
        """
        return self._make_api_call("ListPipelines", kwargs)

    def list_tags_for_resource(self, **kwargs):
        """Lists the tags (metadata) which you have assigned to the resource.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListTagsForResource>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.list_tags_for_resource(
              resourceArn='string'
          )
        :type resourceArn: string
        :param resourceArn: **[REQUIRED]** 
        
          The ARN of the resource whose tags you want to list.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'tags': [
                    {
                        'key': 'string',
                        'value': 'string'
                    },
                ]
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **tags** *(list) --* 
        
              The tags (metadata) which you have assigned to the resource.
        
              
              
        
              - *(dict) --* 
        
                A set of key/value pairs which are used to manage the resource.
        
                
                
        
                - **key** *(string) --* 
        
                  The tag's key.
        
                  
                
        
                - **value** *(string) --* 
        
                  The tag's value.
        
                  
            
          
        
        """
        return self._make_api_call("ListTagsForResource", kwargs)

    def put_logging_options(self, **kwargs):
        """Sets or updates the AWS IoT Analytics logging options.
        
         
        
        Note that if you update the value of any ``loggingOptions`` field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the roleArn field (for example, to correct an invalid policy) it takes up to 5 minutes for that change to take effect. 
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/PutLoggingOptions>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.put_logging_options(
              loggingOptions={
                  'roleArn': 'string',
                  'level': 'ERROR',
                  'enabled': True|False
              }
          )
        :type loggingOptions: dict
        :param loggingOptions: **[REQUIRED]** 
        
          The new values of the AWS IoT Analytics logging options.
        
          
        
        
          - **roleArn** *(string) --* **[REQUIRED]** 
        
            The ARN of the role that grants permission to AWS IoT Analytics to perform logging.
        
            
        
          
          - **level** *(string) --* **[REQUIRED]** 
        
            The logging level. Currently, only "ERROR" is supported.
        
            
        
          
          - **enabled** *(boolean) --* **[REQUIRED]** 
        
            If true, logging is enabled for AWS IoT Analytics.
        
            
        
          
        
        
        :returns: None
        """
        return self._make_api_call("PutLoggingOptions", kwargs)

    def run_pipeline_activity(self, **kwargs):
        """Simulates the results of running a pipeline activity on a message payload.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/RunPipelineActivity>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.run_pipeline_activity(
              pipelineActivity={
                  'channel': {
                      'name': 'string',
                      'channelName': 'string',
                      'next': 'string'
                  },
                  'lambda': {
                      'name': 'string',
                      'lambdaName': 'string',
                      'batchSize': 123,
                      'next': 'string'
                  },
                  'datastore': {
                      'name': 'string',
                      'datastoreName': 'string'
                  },
                  'addAttributes': {
                      'name': 'string',
                      'attributes': {
                          'string': 'string'
                      },
                      'next': 'string'
                  },
                  'removeAttributes': {
                      'name': 'string',
                      'attributes': [
                          'string',
                      ],
                      'next': 'string'
                  },
                  'selectAttributes': {
                      'name': 'string',
                      'attributes': [
                          'string',
                      ],
                      'next': 'string'
                  },
                  'filter': {
                      'name': 'string',
                      'filter': 'string',
                      'next': 'string'
                  },
                  'math': {
                      'name': 'string',
                      'attribute': 'string',
                      'math': 'string',
                      'next': 'string'
                  },
                  'deviceRegistryEnrich': {
                      'name': 'string',
                      'attribute': 'string',
                      'thingName': 'string',
                      'roleArn': 'string',
                      'next': 'string'
                  },
                  'deviceShadowEnrich': {
                      'name': 'string',
                      'attribute': 'string',
                      'thingName': 'string',
                      'roleArn': 'string',
                      'next': 'string'
                  }
              },
              payloads=[
                  b'bytes',
              ]
          )
        :type pipelineActivity: dict
        :param pipelineActivity: **[REQUIRED]** 
        
          The pipeline activity that is run. This must not be a 'channel' activity or a 'datastore' activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a 'lambda' activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.
        
          
        
        
          - **channel** *(dict) --* 
        
            Determines the source of the messages to be processed.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'channel' activity.
        
              
        
            
            - **channelName** *(string) --* **[REQUIRED]** 
        
              The name of the channel from which the messages are processed.
        
              
        
            
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **lambda** *(dict) --* 
        
            Runs a Lambda function to modify the message.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'lambda' activity.
        
              
        
            
            - **lambdaName** *(string) --* **[REQUIRED]** 
        
              The name of the Lambda function that is run on the message.
        
              
        
            
            - **batchSize** *(integer) --* **[REQUIRED]** 
        
              The number of messages passed to the Lambda function for processing.
        
               
        
              The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        
              
        
            
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **datastore** *(dict) --* 
        
            Specifies where to store the processed message data.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'datastore' activity.
        
              
        
            
            - **datastoreName** *(string) --* **[REQUIRED]** 
        
              The name of the data store where processed messages are stored.
        
              
        
            
          
          - **addAttributes** *(dict) --* 
        
            Adds other attributes based on existing attributes in the message.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'addAttributes' activity.
        
              
        
            
            - **attributes** *(dict) --* **[REQUIRED]** 
        
              A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.
        
               
        
              .. note::
        
                 
        
                The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".
        
                 
        
              
        
            
              - *(string) --* 
        
              
                - *(string) --* 
        
                
          
        
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **removeAttributes** *(dict) --* 
        
            Removes attributes from a message.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'removeAttributes' activity.
        
              
        
            
            - **attributes** *(list) --* **[REQUIRED]** 
        
              A list of 1-50 attributes to remove from the message.
        
              
        
            
              - *(string) --* 
        
              
          
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **selectAttributes** *(dict) --* 
        
            Creates a new message using only the specified attributes from the original message. 
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'selectAttributes' activity.
        
              
        
            
            - **attributes** *(list) --* **[REQUIRED]** 
        
              A list of the attributes to select from the message.
        
              
        
            
              - *(string) --* 
        
              
          
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **filter** *(dict) --* 
        
            Filters a message based on its attributes.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'filter' activity.
        
              
        
            
            - **filter** *(string) --* **[REQUIRED]** 
        
              An expression that looks like an SQL WHERE clause that must return a Boolean value.
        
              
        
            
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **math** *(dict) --* 
        
            Computes an arithmetic expression using the message's attributes and adds it to the message.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'math' activity.
        
              
        
            
            - **attribute** *(string) --* **[REQUIRED]** 
        
              The name of the attribute that will contain the result of the math operation.
        
              
        
            
            - **math** *(string) --* **[REQUIRED]** 
        
              An expression that uses one or more existing attributes and must return an integer value.
        
              
        
            
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **deviceRegistryEnrich** *(dict) --* 
        
            Adds data from the AWS IoT device registry to your message.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'deviceRegistryEnrich' activity.
        
              
        
            
            - **attribute** *(string) --* **[REQUIRED]** 
        
              The name of the attribute that is added to the message.
        
              
        
            
            - **thingName** *(string) --* **[REQUIRED]** 
        
              The name of the IoT device whose registry information is added to the message.
        
              
        
            
            - **roleArn** *(string) --* **[REQUIRED]** 
        
              The ARN of the role that allows access to the device's registry information.
        
              
        
            
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
          - **deviceShadowEnrich** *(dict) --* 
        
            Adds information from the AWS IoT Device Shadows service to a message.
        
            
        
          
            - **name** *(string) --* **[REQUIRED]** 
        
              The name of the 'deviceShadowEnrich' activity.
        
              
        
            
            - **attribute** *(string) --* **[REQUIRED]** 
        
              The name of the attribute that is added to the message.
        
              
        
            
            - **thingName** *(string) --* **[REQUIRED]** 
        
              The name of the IoT device whose shadow information is added to the message.
        
              
        
            
            - **roleArn** *(string) --* **[REQUIRED]** 
        
              The ARN of the role that allows access to the device's shadow.
        
              
        
            
            - **next** *(string) --* 
        
              The next activity in the pipeline.
        
              
        
            
          
        
        :type payloads: list
        :param payloads: **[REQUIRED]** 
        
          The sample message payloads on which the pipeline activity is run.
        
          
        
        
          - *(bytes) --* 
        
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'payloads': [
                    b'bytes',
                ],
                'logResult': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **payloads** *(list) --* 
        
              The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)
        
              
              
        
              - *(bytes) --* 
          
            
        
            - **logResult** *(string) --* 
        
              In case the pipeline activity fails, the log message that is generated.
        
              
        
        """
        return self._make_api_call("RunPipelineActivity", kwargs)

    def sample_channel_data(self, **kwargs):
        """Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/SampleChannelData>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.sample_channel_data(
              channelName='string',
              maxMessages=123,
              startTime=datetime(2015, 1, 1),
              endTime=datetime(2015, 1, 1)
          )
        :type channelName: string
        :param channelName: **[REQUIRED]** 
        
          The name of the channel whose message samples are retrieved.
        
          
        
        
        :type maxMessages: integer
        :param maxMessages: 
        
          The number of sample messages to be retrieved. The limit is 10, the default is also 10.
        
          
        
        
        :type startTime: datetime
        :param startTime: 
        
          The start of the time window from which sample messages are retrieved.
        
          
        
        
        :type endTime: datetime
        :param endTime: 
        
          The end of the time window from which sample messages are retrieved.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'payloads': [
                    b'bytes',
                ]
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **payloads** *(list) --* 
        
              The list of message samples. Each sample message is returned as a base64-encoded string.
        
              
              
        
              - *(bytes) --* 
          
        
        """
        return self._make_api_call("SampleChannelData", kwargs)

    def start_pipeline_reprocessing(self, **kwargs):
        """Starts the reprocessing of raw message data through the pipeline.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/StartPipelineReprocessing>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.start_pipeline_reprocessing(
              pipelineName='string',
              startTime=datetime(2015, 1, 1),
              endTime=datetime(2015, 1, 1)
          )
        :type pipelineName: string
        :param pipelineName: **[REQUIRED]** 
        
          The name of the pipeline on which to start reprocessing.
        
          
        
        
        :type startTime: datetime
        :param startTime: 
        
          The start time (inclusive) of raw message data that is reprocessed.
        
          
        
        
        :type endTime: datetime
        :param endTime: 
        
          The end time (exclusive) of raw message data that is reprocessed.
        
          
        
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {
                'reprocessingId': 'string'
            }
          **Response Structure** 
        
          
        
          - *(dict) --* 
            
        
            - **reprocessingId** *(string) --* 
        
              The ID of the pipeline reprocessing activity that was started.
        
              
        
        """
        return self._make_api_call("StartPipelineReprocessing", kwargs)

    def tag_resource(self, **kwargs):
        """Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/TagResource>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.tag_resource(
              resourceArn='string',
              tags=[
                  {
                      'key': 'string',
                      'value': 'string'
                  },
              ]
          )
        :type resourceArn: string
        :param resourceArn: **[REQUIRED]** 
        
          The ARN of the resource whose tags will be modified.
        
          
        
        
        :type tags: list
        :param tags: **[REQUIRED]** 
        
          The new or modified tags for the resource.
        
          
        
        
          - *(dict) --* 
        
            A set of key/value pairs which are used to manage the resource.
        
            
        
          
            - **key** *(string) --* **[REQUIRED]** 
        
              The tag's key.
        
              
        
            
            - **value** *(string) --* **[REQUIRED]** 
        
              The tag's value.
        
              
        
            
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {}
          **Response Structure** 
        
          
        
          - *(dict) --* 
        
        """
        return self._make_api_call("TagResource", kwargs)

    def untag_resource(self, **kwargs):
        """Removes the given tags (metadata) from the resource.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UntagResource>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.untag_resource(
              resourceArn='string',
              tagKeys=[
                  'string',
              ]
          )
        :type resourceArn: string
        :param resourceArn: **[REQUIRED]** 
        
          The ARN of the resource whose tags will be removed.
        
          
        
        
        :type tagKeys: list
        :param tagKeys: **[REQUIRED]** 
        
          The keys of those tags which will be removed.
        
          
        
        
          - *(string) --* 
        
          
        
        
        :rtype: dict
        :returns: 
          
          **Response Syntax** 
        
          
          ::
        
            {}
          **Response Structure** 
        
          
        
          - *(dict) --* 
        
        """
        return self._make_api_call("UntagResource", kwargs)

    def update_channel(self, **kwargs):
        """Updates the settings of a channel.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdateChannel>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.update_channel(
              channelName='string',
              retentionPeriod={
                  'unlimited': True|False,
                  'numberOfDays': 123
              }
          )
        :type channelName: string
        :param channelName: **[REQUIRED]** 
        
          The name of the channel to be updated.
        
          
        
        
        :type retentionPeriod: dict
        :param retentionPeriod: 
        
          How long, in days, message data is kept for the channel.
        
          
        
        
          - **unlimited** *(boolean) --* 
        
            If true, message data is kept indefinitely.
        
            
        
          
          - **numberOfDays** *(integer) --* 
        
            The number of days that message data is kept. The "unlimited" parameter must be false.
        
            
        
          
        
        
        :returns: None
        """
        return self._make_api_call("UpdateChannel", kwargs)

    def update_dataset(self, **kwargs):
        """Updates the settings of a data set.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdateDataset>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.update_dataset(
              datasetName='string',
              actions=[
                  {
                      'actionName': 'string',
                      'queryAction': {
                          'sqlQuery': 'string'
                      }
                  },
              ],
              triggers=[
                  {
                      'schedule': {
                          'expression': 'string'
                      }
                  },
              ]
          )
        :type datasetName: string
        :param datasetName: **[REQUIRED]** 
        
          The name of the data set to update.
        
          
        
        
        :type actions: list
        :param actions: **[REQUIRED]** 
        
          A list of "DatasetAction" objects. Only one action is supported at this time.
        
          
        
        
          - *(dict) --* 
        
            A "DatasetAction" object specifying the query that creates the data set content.
        
            
        
          
            - **actionName** *(string) --* 
        
              The name of the data set action.
        
              
        
            
            - **queryAction** *(dict) --* 
        
              An "SqlQueryDatasetAction" object that contains the SQL query to modify the message.
        
              
        
            
              - **sqlQuery** *(string) --* **[REQUIRED]** 
        
                An SQL query string.
        
                
        
              
            
          
        
        :type triggers: list
        :param triggers: 
        
          A list of "DatasetTrigger" objects. The list can be empty or can contain up to five **DataSetTrigger** objects.
        
          
        
        
          - *(dict) --* 
        
            The "DatasetTrigger" that specifies when the data set is automatically updated.
        
            
        
          
            - **schedule** *(dict) --* 
        
              The "Schedule" when the trigger is initiated.
        
              
        
            
              - **expression** *(string) --* 
        
                The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the Amazon CloudWatch documentation.
        
                
        
              
            
          
        
        
        :returns: None
        """
        return self._make_api_call("UpdateDataset", kwargs)

    def update_datastore(self, **kwargs):
        """Updates the settings of a data store.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdateDatastore>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.update_datastore(
              datastoreName='string',
              retentionPeriod={
                  'unlimited': True|False,
                  'numberOfDays': 123
              }
          )
        :type datastoreName: string
        :param datastoreName: **[REQUIRED]** 
        
          The name of the data store to be updated.
        
          
        
        
        :type retentionPeriod: dict
        :param retentionPeriod: 
        
          How long, in days, message data is kept for the data store.
        
          
        
        
          - **unlimited** *(boolean) --* 
        
            If true, message data is kept indefinitely.
        
            
        
          
          - **numberOfDays** *(integer) --* 
        
            The number of days that message data is kept. The "unlimited" parameter must be false.
        
            
        
          
        
        
        :returns: None
        """
        return self._make_api_call("UpdateDatastore", kwargs)

    def update_pipeline(self, **kwargs):
        """Updates the settings of a pipeline.
        
        
        
        See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdatePipeline>`_
        
        
        **Request Syntax** 
        ::
        
          response = client.update_pipeline(
              pipelineName='string',
              pipelineActivities=[
                  {
                      'channel': {
                          'name': 'string',
                          'channelName': 'string',
                          'next': 'string'
                      },
                      'lambda': {
                          'name': 'string',
                          'lambdaName': 'string',
                          'batchSize': 123,
                          'next': 'string'
                      },
                      'datastore': {
                          'name': 'string',
                          'datastoreName': 'string'
                      },
                      'addAttributes': {
                          'name': 'string',
                          'attributes': {
                              'string': 'string'
                          },
                          'next': 'string'
                      },
                      'removeAttributes': {
                          'name': 'string',
                          'attributes': [
                              'string',
                          ],
                          'next': 'string'
                      },
                      'selectAttributes': {
                          'name': 'string',
                          'attributes': [
                              'string',
                          ],
                          'next': 'string'
                      },
                      'filter': {
                          'name': 'string',
                          'filter': 'string',
                          'next': 'string'
                      },
                      'math': {
                          'name': 'string',
                          'attribute': 'string',
                          'math': 'string',
                          'next': 'string'
                      },
                      'deviceRegistryEnrich': {
                          'name': 'string',
                          'attribute': 'string',
                          'thingName': 'string',
                          'roleArn': 'string',
                          'next': 'string'
                      },
                      'deviceShadowEnrich': {
                          'name': 'string',
                          'attribute': 'string',
                          'thingName': 'string',
                          'roleArn': 'string',
                          'next': 'string'
                      }
                  },
              ]
          )
        :type pipelineName: string
        :param pipelineName: **[REQUIRED]** 
        
          The name of the pipeline to update.
        
          
        
        
        :type pipelineActivities: list
        :param pipelineActivities: **[REQUIRED]** 
        
          A list of "PipelineActivity" objects.
        
           
        
          The list can be 1-25 **PipelineActivity** objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.
        
          
        
        
          - *(dict) --* 
        
            An activity that performs a transformation on a message.
        
            
        
          
            - **channel** *(dict) --* 
        
              Determines the source of the messages to be processed.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'channel' activity.
        
                
        
              
              - **channelName** *(string) --* **[REQUIRED]** 
        
                The name of the channel from which the messages are processed.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **lambda** *(dict) --* 
        
              Runs a Lambda function to modify the message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'lambda' activity.
        
                
        
              
              - **lambdaName** *(string) --* **[REQUIRED]** 
        
                The name of the Lambda function that is run on the message.
        
                
        
              
              - **batchSize** *(integer) --* **[REQUIRED]** 
        
                The number of messages passed to the Lambda function for processing.
        
                 
        
                The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **datastore** *(dict) --* 
        
              Specifies where to store the processed message data.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'datastore' activity.
        
                
        
              
              - **datastoreName** *(string) --* **[REQUIRED]** 
        
                The name of the data store where processed messages are stored.
        
                
        
              
            
            - **addAttributes** *(dict) --* 
        
              Adds other attributes based on existing attributes in the message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'addAttributes' activity.
        
                
        
              
              - **attributes** *(dict) --* **[REQUIRED]** 
        
                A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.
        
                 
        
                .. note::
        
                   
        
                  The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".
        
                   
        
                
        
              
                - *(string) --* 
        
                
                  - *(string) --* 
        
                  
            
          
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **removeAttributes** *(dict) --* 
        
              Removes attributes from a message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'removeAttributes' activity.
        
                
        
              
              - **attributes** *(list) --* **[REQUIRED]** 
        
                A list of 1-50 attributes to remove from the message.
        
                
        
              
                - *(string) --* 
        
                
            
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **selectAttributes** *(dict) --* 
        
              Creates a new message using only the specified attributes from the original message. 
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'selectAttributes' activity.
        
                
        
              
              - **attributes** *(list) --* **[REQUIRED]** 
        
                A list of the attributes to select from the message.
        
                
        
              
                - *(string) --* 
        
                
            
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **filter** *(dict) --* 
        
              Filters a message based on its attributes.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'filter' activity.
        
                
        
              
              - **filter** *(string) --* **[REQUIRED]** 
        
                An expression that looks like an SQL WHERE clause that must return a Boolean value.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **math** *(dict) --* 
        
              Computes an arithmetic expression using the message's attributes and adds it to the message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'math' activity.
        
                
        
              
              - **attribute** *(string) --* **[REQUIRED]** 
        
                The name of the attribute that will contain the result of the math operation.
        
                
        
              
              - **math** *(string) --* **[REQUIRED]** 
        
                An expression that uses one or more existing attributes and must return an integer value.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **deviceRegistryEnrich** *(dict) --* 
        
              Adds data from the AWS IoT device registry to your message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'deviceRegistryEnrich' activity.
        
                
        
              
              - **attribute** *(string) --* **[REQUIRED]** 
        
                The name of the attribute that is added to the message.
        
                
        
              
              - **thingName** *(string) --* **[REQUIRED]** 
        
                The name of the IoT device whose registry information is added to the message.
        
                
        
              
              - **roleArn** *(string) --* **[REQUIRED]** 
        
                The ARN of the role that allows access to the device's registry information.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
            - **deviceShadowEnrich** *(dict) --* 
        
              Adds information from the AWS IoT Device Shadows service to a message.
        
              
        
            
              - **name** *(string) --* **[REQUIRED]** 
        
                The name of the 'deviceShadowEnrich' activity.
        
                
        
              
              - **attribute** *(string) --* **[REQUIRED]** 
        
                The name of the attribute that is added to the message.
        
                
        
              
              - **thingName** *(string) --* **[REQUIRED]** 
        
                The name of the IoT device whose shadow information is added to the message.
        
                
        
              
              - **roleArn** *(string) --* **[REQUIRED]** 
        
                The ARN of the role that allows access to the device's shadow.
        
                
        
              
              - **next** *(string) --* 
        
                The next activity in the pipeline.
        
                
        
              
            
          
        
        
        :returns: None
        """
        return self._make_api_call("UpdatePipeline", kwargs)
